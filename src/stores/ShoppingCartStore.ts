import {makeAutoObservable, runInAction} from "mobx";import {IShoppingProduct, IShoppingProductCost} from "../types";import {SHOPPING_PRODUCTS} from "../mocks";import {formatNumberToFixed} from "../utils/helpers";import {MESSAGE_DISPLAY_DURATION} from "../constants";class ShoppingCartStore {    products: IShoppingProduct[] = SHOPPING_PRODUCTS;    timer: NodeJS.Timeout | null = null;    constructor() {        makeAutoObservable(this)    }    get totalPrice(): number {        let totalPrice = 0;        this.products.forEach((product): void => {            if (product.deleted) return;            if (product.cost.promotional_product) {                totalPrice = totalPrice + product.cost.totalAmountWithDiscount            } else {                totalPrice = totalPrice + product.cost.totalAmount            }        })        return formatNumberToFixed(totalPrice)    }    get productDeleted(): boolean {        return this.products.some((product) => product.deleted === true);    }    updateQuantity = (id: string, quantity: number): void => {        const productIndex = this.findProductIndexById(id);        if (productIndex === -1) return;        const cost: IShoppingProductCost = this.calculatePrices(this.products[productIndex].cost, quantity);        this.updateProductAtIndex(productIndex, { cost });    }    deleteCard = (id: string): void => {        const productIndex = this.products.findIndex((product) => product.id === id);        if (productIndex === -1) return;        this.updateProductAtIndex(productIndex, { deleted: true });        this.timer = setTimeout(() => {            runInAction(() => {                this.products = this.products.filter((product) => product.id !== id);            });        }, MESSAGE_DISPLAY_DURATION);    }    restoreCard = (id: string): void => {        const productIndex = this.products.findIndex((product) => product.id === id);        if (productIndex === -1) return;        this.updateProductAtIndex(productIndex, { deleted: false });        if (this.timer) {            clearTimeout(this.timer);        }    }    private updateProductAtIndex = (index: number, updatedProperties: Partial<IShoppingProduct>): void => {        const product = this.products[index];        this.products[index] = { ...product, ...updatedProperties };    }    private findProductIndexById = (id: string): number => {        return this.products.findIndex((product) => product.id === id);    }    private calculatePrices = (productCost: IShoppingProductCost, quantity: number): IShoppingProductCost => {        const totalAmount = formatNumberToFixed(quantity * productCost.price);        if (!productCost.promotional_product) {            return {                ...productCost,                totalAmount,                quantity            }        }        return this.calculateDiscountPrices(productCost, totalAmount, quantity)    }    private calculateDiscountPrices = (        productCost: IShoppingProductCost, totalAmount: number, quantity: number    ): IShoppingProductCost => {        const discountAmount = formatNumberToFixed((totalAmount * productCost.discount!) / 100);        const totalAmountWithDiscount = formatNumberToFixed(totalAmount - discountAmount);        return {            ...productCost,            totalAmount,            quantity,            discountAmount,            totalAmountWithDiscount        }    }}export default new ShoppingCartStore();